#!/bin/bash

echo "🧪 Tests de pénétration automatiques - Dream Lineup"
echo "=================================================="
echo ""

BASE_URL="http://localhost:4000"
echo "🎯 Cible: $BASE_URL"
echo ""

# Couleurs pour les résultats
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Vérifier que le serveur répond
echo "🔍 Vérification du serveur..."
if ! curl -s --connect-timeout 5 $BASE_URL/football/leagues >/dev/null; then
    echo -e "${RED}❌ Serveur non accessible sur $BASE_URL${NC}"
    echo "💡 Assurez-vous que le backend tourne (npm run start:dev)"
    exit 1
fi
echo -e "${GREEN}✅ Serveur accessible${NC}"
echo ""

# Test 1: Rate limiting global
echo "🚦 TEST 1: Rate limiting global (100 req/15min)"
echo "---------------------------------------------"
echo "Envoi de 105 requêtes pour tester la limite..."

rate_limit_429=0
success_count=0

for i in {1..105}; do 
    response=$(curl -s -o /dev/null -w "%{http_code}" $BASE_URL/football/leagues 2>/dev/null)
    
    if [ "$response" = "200" ]; then
        ((success_count++))
    elif [ "$response" = "429" ]; then
        ((rate_limit_429++))
    fi
    
    # Afficher progression
    if [ $i -le 5 ] || [ $i -ge 101 ]; then
        echo "Requête $i: $response"
    elif [ $i -eq 6 ]; then
        echo "... (requêtes 6-100) ..."
    fi
    
    # Petite pause pour éviter de surcharger
    sleep 0.1
done

echo ""
echo "📊 Résultat Rate Limiting Global:"
echo "  - Requêtes réussies (200): $success_count"
echo "  - Requêtes bloquées (429): $rate_limit_429"

if [ $rate_limit_429 -gt 0 ]; then
    echo -e "${GREEN}✅ Rate limiting global: ACTIF${NC}"
    rate_limit_score=1
else
    echo -e "${RED}❌ Rate limiting global: INACTIF${NC}"
    rate_limit_score=0
fi
echo ""

# Test 2: Validation DTOs (protection injection)
echo "🛡️ TEST 2: Validation DTOs (protection injection)"
echo "-----------------------------------------------"

echo "Test 1 - Payload XSS malveillant:"
response1=$(curl -s -X POST $BASE_URL/football/save-team \
  -H "Content-Type: application/json" \
  -d '{"malicious":"<script>alert(1)</script>","xss":"payload"}' \
  -w "%{http_code}" -o /dev/null 2>/dev/null)
echo "  Status: $response1"

echo "Test 2 - Types incorrects:"
response2=$(curl -s -X POST $BASE_URL/football/save-team \
  -H "Content-Type: application/json" \
  -d '{"name":123,"formation":true,"team":"invalid"}' \
  -w "%{http_code}" -o /dev/null 2>/dev/null)
echo "  Status: $response2"

echo "Test 3 - Propriétés interdites (whitelist):"
response3=$(curl -s -X POST $BASE_URL/football/save-team \
  -H "Content-Type: application/json" \
  -d '{"admin":true,"role":"superuser","hack":"attempt"}' \
  -w "%{http_code}" -o /dev/null 2>/dev/null)
echo "  Status: $response3"

echo "Test 4 - Injection SQL simulée:"
response4=$(curl -s -X POST $BASE_URL/football/save-team \
  -H "Content-Type: application/json" \
  -d '{"name":"test'\''OR 1=1--","formation":"4-4-2"}' \
  -w "%{http_code}" -o /dev/null 2>/dev/null)
echo "  Status: $response4"

# Vérifier si les DTOs bloquent bien (400 = Bad Request attendu)
dto_protected=0
if [ "$response1" = "400" ] && [ "$response2" = "400" ] && [ "$response3" = "400" ] && [ "$response4" = "400" ]; then
    echo -e "${GREEN}✅ Validation DTOs: ACTIVE (tous rejets à 400)${NC}"
    dto_protected=1
elif [ "$response1" = "400" ] || [ "$response2" = "400" ] || [ "$response3" = "400" ]; then
    echo -e "${YELLOW}🟡 Validation DTOs: PARTIELLE${NC}"
    dto_protected=0
else
    echo -e "${RED}❌ Validation DTOs: INACTIVE${NC}"
    dto_protected=0
fi
echo ""

# Test 3: Headers de sécurité (Helmet)
echo "🔒 TEST 3: Headers de sécurité (Helmet)"
echo "------------------------------------"
headers=$(curl -s -I $BASE_URL/football/leagues 2>/dev/null)

security_headers=0

echo "Vérification des headers de sécurité:"

if echo "$headers" | grep -qi "x-frame-options"; then
    echo -e "  ✅ X-Frame-Options: ${GREEN}présent${NC}"
    ((security_headers++))
else
    echo -e "  ❌ X-Frame-Options: ${RED}manquant${NC}"
fi

if echo "$headers" | grep -qi "content-security-policy"; then
    echo -e "  ✅ Content-Security-Policy: ${GREEN}présent${NC}"
    ((security_headers++))
else
    echo -e "  ❌ Content-Security-Policy: ${RED}manquant${NC}"
fi

if echo "$headers" | grep -qi "x-content-type-options"; then
    echo -e "  ✅ X-Content-Type-Options: ${GREEN}présent${NC}"
    ((security_headers++))
else
    echo -e "  ❌ X-Content-Type-Options: ${RED}manquant${NC}"
fi

if echo "$headers" | grep -qi "x-dns-prefetch-control"; then
    echo -e "  ✅ X-DNS-Prefetch-Control: ${GREEN}présent${NC}"
    ((security_headers++))
else
    echo -e "  ❌ X-DNS-Prefetch-Control: ${RED}manquant${NC}"
fi

echo ""
if [ $security_headers -ge 3 ]; then
    echo -e "${GREEN}✅ Headers sécurisés: ACTIFS ($security_headers/4)${NC}"
    headers_score=1
else
    echo -e "${RED}❌ Headers sécurisés: INSUFFISANTS ($security_headers/4)${NC}"
    headers_score=0
fi
echo ""

# Test 4: Protection CORS
echo "🌐 TEST 4: Protection CORS"
echo "------------------------"

echo "Test CORS depuis domaine malveillant:"
cors_response=$(curl -s \
    -H "Origin: https://malicious-hacker-site.com" \
    -H "Access-Control-Request-Method: POST" \
    -H "Access-Control-Request-Headers: Authorization" \
    -X OPTIONS $BASE_URL/football/save-team \
    -w "%{http_code}" -o /dev/null 2>/dev/null)

echo "  Status pour origine malveillante: $cors_response"

# Test CORS autorisé
cors_response_good=$(curl -s \
    -H "Origin: http://localhost:3000" \
    -H "Access-Control-Request-Method: GET" \
    -X OPTIONS $BASE_URL/football/leagues \
    -w "%{http_code}" -o /dev/null 2>/dev/null)

echo "  Status pour origine autorisée: $cors_response_good"

if [ "$cors_response" != "200" ] && [ "$cors_response_good" = "200" ]; then
    echo -e "${GREEN}✅ Protection CORS: ACTIVE (bloque malveillant, autorise légal)${NC}"
    cors_protected=1
elif [ "$cors_response" != "200" ]; then
    echo -e "${YELLOW}🟡 Protection CORS: RESTRICTIVE (bloque tout)${NC}"
    cors_protected=1
else
    echo -e "${RED}❌ Protection CORS: INACTIVE (autorise tout)${NC}"
    cors_protected=0
fi
echo ""

# Test 5: Rate limiting spécialisé AUTH
echo "🔐 TEST 5: Rate limiting AUTH (10 tentatives/15min)"
echo "------------------------------------------------"

echo "Test avec token invalide (doit bloquer après 10 tentatives):"
auth_blocked=0

for i in {1..12}; do 
    auth_response=$(curl -s \
        -H "Authorization: Bearer fake_token_$i" \
        $BASE_URL/football/teams-saved \
        -w "%{http_code}" -o /dev/null 2>/dev/null)
    
    if [ $i -le 3 ] || [ $i -ge 11 ]; then
        echo "  Tentative auth $i: $auth_response"
    elif [ $i -eq 4 ]; then
        echo "  ... (tentatives 4-10) ..."
    fi
    
    if [ "$auth_response" = "429" ]; then
        auth_blocked=1
    fi
    
    sleep 0.1
done

if [ $auth_blocked -eq 1 ]; then
    echo -e "${GREEN}✅ Rate limiting AUTH: ACTIF${NC}"
    auth_limit_score=1
else
    echo -e "${YELLOW}🟡 Rate limiting AUTH: Pas testé complètement${NC}"
    auth_limit_score=0
fi
echo ""

# RÉSUMÉ FINAL
echo "📊 RÉSUMÉ DES TESTS DE PÉNÉTRATION"
echo "=================================="

total_score=0

echo -n "🚦 Rate limiting global: "
if [ $rate_limit_score -eq 1 ]; then
    echo -e "${GREEN}✅ ACTIF${NC}"
    ((total_score++))
else
    echo -e "${RED}❌ INACTIF${NC}"
fi

echo -n "🛡️ Validation DTOs: "
if [ $dto_protected -eq 1 ]; then
    echo -e "${GREEN}✅ ACTIVE${NC}"
    ((total_score++))
else
    echo -e "${RED}❌ INACTIVE${NC}"
fi

echo -n "🔒 Headers sécurité: "
if [ $headers_score -eq 1 ]; then
    echo -e "${GREEN}✅ ACTIFS${NC}"
    ((total_score++))
else
    echo -e "${RED}❌ INSUFFISANTS${NC}"
fi

echo -n "🌐 Protection CORS: "
if [ $cors_protected -eq 1 ]; then
    echo -e "${GREEN}✅ ACTIVE${NC}"
    ((total_score++))
else
    echo -e "${RED}❌ INACTIVE${NC}"
fi

echo -n "🔐 Rate limiting AUTH: "
if [ $auth_limit_score -eq 1 ]; then
    echo -e "${GREEN}✅ ACTIF${NC}"
    ((total_score++))
else
    echo -e "${YELLOW}🟡 PARTIEL${NC}"
fi

echo ""
echo "🏆 SCORE FINAL: $total_score/5 protections"
echo ""

if [ $total_score -eq 5 ]; then
    echo -e "${GREEN}🛡️ EXCELLENT: Toutes les protections sont actives !${NC}"
    echo -e "${GREEN}🎯 Sécurité de niveau PROFESSIONNEL${NC}"
elif [ $total_score -eq 4 ]; then
    echo -e "${GREEN}🟢 TRÈS BIEN: Sécurité élevée${NC}"
elif [ $total_score -eq 3 ]; then
    echo -e "${YELLOW}🟡 BIEN: Sécurité correcte${NC}"
elif [ $total_score -eq 2 ]; then
    echo -e "${YELLOW}🟠 MOYEN: Améliorations nécessaires${NC}"
else
    echo -e "${RED}🔴 FAIBLE: Sécurité insuffisante${NC}"
fi

echo ""
echo "💡 RECOMMANDATIONS:"
if [ $rate_limit_score -eq 0 ]; then
    echo "  - Vérifier la configuration du rate limiting dans main.ts"
fi
if [ $dto_protected -eq 0 ]; then
    echo "  - Vérifier la validation des DTOs et ValidationPipe global"
fi
if [ $headers_score -eq 0 ]; then
    echo "  - Vérifier la configuration Helmet dans main.ts"
fi
if [ $cors_protected -eq 0 ]; then
    echo "  - Configurer CORS de manière restrictive"
fi

echo ""
echo "✅ Tests de pénétration terminés"
echo "📅 $(date)"